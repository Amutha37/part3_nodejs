{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","token","create","newObject","a","config","headers","Authorization","axios","post","request","data","fetchAll","getAll","get","nonExisting","id","date","then","response","concat","update","put","setToken","newToken","login","credentials","loginService","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","username","setUsername","password","setPassword","user","setUser","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","addNote","event","preventDefault","noteObject","Date","toISOString","Math","random","length","returnedNote","setTimeout","catch","error","console","log","handleNoteChange","target","value","notesToShow","filter","handleLogin","setItem","stringify","onSubmit","type","name","onChange","map","find","n","changedNote","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"qOAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCH3BK,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGJ,UAAU,QAAb,SAAsBI,KCc7CC,EAhBA,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2G,gBCNAC,EAAU,aAEZC,EAAQ,KAiBNC,EAAM,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAEPC,EAAS,CACbC,QAAS,CAAEC,cAAeN,IAHf,SAMSO,IAAMC,KAAKT,EAASG,EAAWE,GANxC,cAMPK,EANO,yBASNA,EAAQC,MATF,2CAAH,sDA8BGC,EANE,CACfC,OArCa,WACb,IAAMH,EAAUF,IAAMM,IAAId,GACpBe,EAAc,CAClBC,GAAI,IACJzB,QAAS,mCACT0B,KAAM,2BACN5B,WAAW,GAEb,OAAOqB,EAAQQ,MAAK,SAACC,GAAD,OAAcA,EAASR,KAAKS,OAAOL,OA8BvDb,SACAmB,OAfa,SAACL,EAAIb,GAElB,OADgBK,IAAMc,IAAN,UAAatB,EAAb,YAAwBgB,GAAMb,GAC/Be,MAAK,SAACC,GAAD,OAAcA,EAASR,SAc3CY,SA5Ce,SAACC,GAChBvB,EAAK,iBAAauB,KCJdC,EAAK,uCAAG,WAAOC,GAAP,eAAAtB,EAAA,sEACWI,IAAMC,KAHf,aAG6BiB,GAD/B,cACNP,EADM,yBAELA,EAASR,MAFJ,2CAAH,sDAOIgB,EAFM,CAAEF,SCoLRG,EArLH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAgCR,mBAAS,IAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAwBV,mBAAS,MAAjC,mBAAOW,EAAP,KAAaC,EAAb,KAEA,EAAwCZ,mBAAS,MAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,EAAYhC,SAASK,MAAK,SAAC4B,GACzBf,EAASe,QAEV,IAEHF,qBAAU,WACR,IAAMG,EAAiBC,OAAOC,aAAaC,QAAQ,qBACnD,GAAIH,EAAgB,CAClB,IAAMP,EAAOW,KAAKC,MAAML,GACxBN,EAAQD,GACRK,EAAYtB,SAASiB,EAAKvC,UAE3B,IAEH,IAAMoD,EAAU,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBjE,QAASyC,EACTf,MAAM,IAAIwC,MAAOC,cACjBrE,UAAWsE,KAAKC,SAAW,GAC3B5C,GAAIc,EAAM+B,OAAS,GAErBhB,EACG3C,OAAOsD,GACPtC,MAAK,SAAC4C,GACL/B,EAASD,EAAMV,OAAO0C,IACtB7B,EAAW,IACXU,EAAgB,SAAD,OAAUa,EAAWjE,QAArB,yBACfwE,YAAW,WACTpB,EAAgB,QACf,QAEJqB,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAM9C,SAASR,MAC3BgC,EAAgBsB,EAAM9C,SAASR,MAC/BoD,YAAW,WACTpB,EAAgB,QACf,SAIHyB,EAAmB,SAACd,GACxBrB,EAAWqB,EAAMe,OAAOC,QAGpBC,EAAcrC,EAAUJ,EAAQA,EAAM0C,QAAO,SAACtF,GAAD,OAAUA,EAAKG,aAkC5DoF,EAAW,uCAAG,WAAOnB,GAAP,eAAAlD,EAAA,6DAClBkD,EAAMC,iBADY,kBAIG5B,EAAaF,MAAM,CACpCW,WACAE,aANc,OAIVE,EAJU,OAQhBQ,OAAOC,aAAayB,QAAQ,oBAAqBvB,KAAKwB,UAAUnC,IAChEK,EAAYtB,SAASiB,EAAKvC,OAC1BwC,EAAQD,GACR0B,QAAQC,IAAI,kBAAmB/B,EAAUE,GACzCD,EAAY,IACZE,EAAY,IAbI,kDAehBI,EAAgB,qBAChBoB,YAAW,WACTpB,EAAgB,QACf,KAlBa,0DAAH,sDAyDjB,OACE,sBAAKrD,UAAU,iBAAf,UACE,uCACA,cAAC,EAAD,CAAcI,QAASgD,IAEb,OAATF,EArCH,qBAAKlD,UAAU,uBAAf,SACE,uBAAMA,UAAU,aAAasF,SAAUH,EAAvC,UACE,2CAEE,uBACEI,KAAK,OACLP,MAAOlC,EACP0C,KAAK,WACLC,SAAU,gBAAGV,EAAH,EAAGA,OAAH,OAAgBhC,EAAYgC,EAAOC,aAGjD,2CAEE,uBACEO,KAAK,WACLP,MAAOhC,EACPwC,KAAK,WACLC,SAAU,gBAAGV,EAAH,EAAGA,OAAH,OAAgB9B,EAAY8B,EAAOC,aAGjD,wBAAQO,KAAK,SAAb,wBAoBA,gCACE,8BAAIrC,EAAKsC,KAAT,gBAfN,uBAAMF,SAAUvB,EAAhB,UACE,uBAAOiB,MAAOtC,EAAS+C,SAAUX,IACjC,wBAAQS,KAAK,SAAb,wBAkBA,8BACE,yBAAQrF,QAAS,kBAAM2C,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGqC,EAAYS,KAAI,SAAC9F,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAhHD,SAAC6B,GAS1B,IAAM9B,EAAO4C,EAAMmD,MAAK,SAACC,GAAD,OAAOA,EAAElE,KAAOA,KAClCmE,EAAW,2BAAQjG,GAAR,IAAcG,WAAYH,EAAKG,YAEhDwD,EACGxB,OAAOL,EAAImE,GACXjE,MAAK,SAAC4C,GACL/B,EAASD,EAAMkD,KAAI,SAAC9F,GAAD,OAAWA,EAAK8B,KAAOA,EAAK9B,EAAO4E,SAEvDE,OAAM,SAACC,GACNtB,EAAgB,SAAD,OACJzD,EAAKK,QADD,sCAGfwE,YAAW,WACTpB,EAAgB,QACf,KAIHZ,EAASD,EAAM0C,QAAO,SAACU,GAAD,OAAOA,EAAElE,KAAOA,SAqFVoE,CAAmBlG,EAAK8B,MAF3C9B,EAAK8B,SAMhB,cAAC,EAAD,Q,MCpLNqE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.79ee60c2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from \"react\";\n\nconst Notification = ({ message }) => <p className=\"error\">{message}</p>;\n\nexport default Notification;\n","const Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2021\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from 'axios'\n// const baseUrl = \"http://localhost:3000/api/notes\";\n// const baseUrl = \"https://afternoon-plateau-39207.herokuapp.com/api/notes\";\nconst baseUrl = '/api/notes'\n\nlet token = null\nconst setToken = (newToken) => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 1000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: false,\n  }\n  return request.then((response) => response.data.concat(nonExisting))\n  // return request.then((response) => response.data);\n}\n\nconst create = async (newObject) => {\n  // authorize token\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const request = await axios.post(baseUrl, newObject, config)\n  // without async\n  // return request.then((response) => response.data)\n  return request.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then((response) => response.data)\n}\n// Since the names of the keys and the assigned variables are the same, we can write the object definition with more compact syntax:\n// from this to ES6 {\n//   getAll: getAll,\n//   create: create,\n//   update: update\n// }\n//  to this\n\nconst fetchAll = {\n  getAll,\n  create,\n  update,\n  setToken,\n}\nexport default fetchAll\n","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async (credentials) => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nconst loginService = { login }\n\nexport default loginService\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes)\n    })\n  }, [])\n  // Handle the first loading page with user loged in\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    noteService\n      .create(noteObject)\n      .then((returnedNote) => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n        setErrorMessage(`Note '${noteObject.content}' succesfully saved.`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n      .catch((error) => {\n        console.log(error.response.data)\n        setErrorMessage(error.response.data)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n  // show list of important and all\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important)\n\n  // toggle button\n  const toggleImportanceOf = (id) => {\n    //  defines the unique url for each note resource based on its id.\n\n    //  find method  find the note to modify,then assign to note.\n    // Create new object exact copy of old accept the important property.\n\n    // new note is then sent with a PUT request to the backend where it will replace the old object. put(url, changedNote)\n    // callback function sets the state and render component notes with new array , except for the old note with is replaced with teh note exact item.\n\n    const note = notes.find((n) => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)))\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        // alert(\n        //   `the note '${note.content}' was already deleted from server`\n        // )\n        setNotes(notes.filter((n) => n.id !== id))\n      })\n  }\n  // === login handler ===\n  const handleLogin = async (event) => {\n    event.preventDefault()\n\n    try {\n      const user = await loginService.login({\n        username,\n        password,\n      })\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user))\n      noteService.setToken(user.token)\n      setUser(user)\n      console.log('logging in with', username, password)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 100000)\n    }\n  }\n\n  // === login form ===\n\n  const loginForm = () => (\n    <div className='login_form_container'>\n      <form className='login_form' onSubmit={handleLogin}>\n        <div>\n          username\n          <input\n            type='text'\n            value={username}\n            name='Username'\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type='password'\n            value={password}\n            name='Password'\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type='submit'>login</button>\n      </form>\n    </div>\n  )\n\n  const noteForm = () => (\n    <form onSubmit={addNote}>\n      <input value={newNote} onChange={handleNoteChange} />\n      <button type='submit'>save</button>\n    </form>\n  )\n\n  return (\n    <div className='main_container'>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      {/* == conditional form */}\n      {user === null ? (\n        loginForm()\n      ) : (\n        <div>\n          <p>{user.name} logged-in</p>\n          {noteForm()}\n        </div>\n      )}\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}