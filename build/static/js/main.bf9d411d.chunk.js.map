{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","fetchAll","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","console","log","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf9d411d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from \"react\";\n\nconst Notification = ({ message }) => <p className=\"error\">{message}</p>;\n\nexport default Notification;\n","const Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2021\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from \"axios\";\n// const baseUrl = \"http://localhost:3000/api/notes\";\n// const baseUrl = \"https://afternoon-plateau-39207.herokuapp.com/api/notes\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 1000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((response) => response.data.concat(nonExisting));\n  // return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n// Since the names of the keys and the assigned variables are the same, we can write the object definition with more compact syntax:\n// from this to ES6 {\n//   getAll: getAll,\n//   create: create,\n//   update: update\n// }\n//  to this\n\nconst fetchAll = {\n  getAll,\n  create,\n  update,\n};\nexport default fetchAll;\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"error display banner...\");\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    };\n    noteService\n      .create(noteObject)\n      .then((returnedNote) => {\n        setNotes(notes.concat(returnedNote));\n        setNewNote(\"\");\n        setErrorMessage(`Note '${noteObject.content}' succesfully saved.`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      })\n      .catch((error) => {\n        console.log(error.response.data);\n        setErrorMessage(error.response.data);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n  // show list of important and all\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  // toggle button\n  const toggleImportanceOf = (id) => {\n    //  defines the unique url for each note resource based on its id.\n\n    //  find method  find the note to modify,then assign to note.\n    // Create new object exact copy of old accept the important property.\n\n    // new note is then sent with a PUT request to the backend where it will replace the old object. put(url, changedNote)\n    // callback function sets the state and render component notes with new array , except for the old note with is replaced with teh note exact item.\n\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        // alert(\n        //   `the note '${note.content}' was already deleted from server`\n        // )\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}